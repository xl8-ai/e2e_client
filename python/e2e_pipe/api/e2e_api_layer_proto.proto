syntax = "proto3";

package e2e_pipe.api;

// TODO: Uncomment the following for gRPC-gateway support.
// import "google/api/annotations.proto";

enum ApiType {
    SPEECH_TO_SPEECH = 0;
    SPEECH_TO_TEXT = 1;
    TEXT_TO_SPEECH = 2;
}

enum Timeliness {
    // Realtime use-case. Typically the response has a <3 seconds delay.
    REALTIME = 0;
    // This may mean faster or slower than real-time.
    BATCH = 1;
    // This will return partial STT candidate results.
    INTERPRETING = 2;
}

message E2eApiData {
    oneof data {
        bytes audio = 1;
        string text = 2;
    }

    // True if the result is a partial result which can be replaced by a final (non-partial) result.
    // Used only for text data.
    bool is_partial = 3;

    // The original text before translation. Used only for text data.
    string original = 4;

    uint64 time_start_msec = 5;
    uint64 time_end_msec = 6;
}

enum E2eApiResponseType {
    E2E_API_RESPONSE_SUCCESS = 0;
    E2E_API_RESPONSE_ERROR = 1;
}

message E2eApiTextDataFormat {
}

message E2eApiAudioDataFormat {
    uint32 sample_rate = 1;
    uint32 channels = 2;
}

message E2eApiDataFormat {
    // An ISO 639-1 two-letter language code.
    string language_code = 1;

    // Additional languages. If this was for a source audio format, these languages may appear in the source audio
    // in addition to the language_code, which is the main language spoken in the audio. If this was for a target text
    // format, these languages are additional languages the content will be translated to.
    repeated string additional_language_code = 4;

    oneof format {
        E2eApiTextDataFormat text_format = 2;
        E2eApiAudioDataFormat audio_format = 3;
    }
}

message E2eApiError {
    string error_code = 1;

    // An optional detailed error message.
    string error_message = 2;
}

message E2eApiInitRequest {
    string client_id = 1;
    string api_key = 2;
    ApiType api_type = 3;
    Timeliness timeliness = 4;

    // Note that not all the formats are supported.
    E2eApiDataFormat source_data_format = 5;
    E2eApiDataFormat target_data_format = 6;
}

message E2eApiInitResponse {
    string session_id = 1;

    E2eApiResponseType type = 2;
    // The detailed error filled only when type == E2eApiResponseType.E2E_API_RESPONSE_ERROR.
    E2eApiError error = 3;
}

message E2eApiTransRequest {
    string session_id = 1;

    E2eApiData data = 2;
}

message E2eApiTransResponse {
    string session_id = 1;

    E2eApiResponseType type = 2;
    // The detailed error filled only when type == E2eApiResponseType.E2E_API_RESPONSE_ERROR.
    E2eApiError error = 3;

    E2eApiData data = 4;
}

message E2eApiCloseRequest {
    string session_id = 1;

    // If false, terminate the session immediately without waiting for the remaining audio data.
    bool wait_to_drain = 2;
}

message E2eApiCloseResponse {
    string session_id = 1;

    E2eApiResponseType type = 2;
    // The detailed error filled only when type == E2eApiResponseType.E2E_API_RESPONSE_ERROR.
    E2eApiError error = 3;

    // The remaining data from the server.
    E2eApiData data = 4;
}

// A service that Speech-to-Speech API layer will serve.
service E2eApiService {
    // Initialize the API service.
    rpc InitE2e(E2eApiInitRequest) returns (E2eApiInitResponse) {
        // TODO: Uncomment the following for gRPC-gateway support.
        /*
        option (google.api.http) = {
            post: "/v1/e2e/init"
            body: "*"
        };
        */
    }

    // Process a translation request.
    rpc TransE2e(E2eApiTransRequest) returns (E2eApiTransResponse) {
        // TODO: Uncomment the following for gRPC-gateway support.
        /*
        option (google.api.http) = {
            post: "/v1/e2e/trans"
            body: "*"
        };
        */
    }

    // Close the API service.
    rpc CloseE2e(E2eApiCloseRequest) returns (E2eApiCloseResponse) {
        // TODO: Uncomment the following for gRPC-gateway support.
        /*
        option (google.api.http) = {
            post: "/v1/e2e/close"
            body: "*"
        };
        */
    }
}
